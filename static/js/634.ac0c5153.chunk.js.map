{"version":3,"file":"static/js/634.ac0c5153.chunk.js","mappings":"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","sources":["components/Filter.tsx","components/Navigation.tsx","components/ProductsLayout.tsx"],"sourcesContent":["import React, { ChangeEvent, useMemo } from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport ClearIcon from \"@mui/icons-material/ClearOutlined\";\r\nimport debounce from \"lodash/debounce\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { shallowEqual, useSelector } from \"react-redux\";\r\n\r\nimport { useDispatchAction, useMessage } from \"../hooks\";\r\nimport { areProductsNotEmpty, getProductsIDs, getCurrentPageNumber } from \"reduxware/selectors\";\r\nimport { PAGE_PREFIX, PRODUCT_PREFIX } from \"config\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\ninterface Props {\r\n    setTextField: (arg0: string) => void;\r\n    resetTextField: () => void;\r\n    value: string;\r\n}\r\nconst DEBOUNCE_TIME_MS = 400;\r\n\r\nconst Filter = (props: Props) => {\r\n    const { resetTextField, setTextField, value } = props;\r\n    const { setFilterId } = useDispatchAction();\r\n    const areProductsLoaded = useSelector(areProductsNotEmpty);\r\n    const currentDataPageNumber = useSelector(getCurrentPageNumber, shallowEqual);\r\n    const productsIDs = useSelector(getProductsIDs);\r\n    const showMessage = useMessage();\r\n    const navigate = useNavigate();\r\n\r\n    const handleReset = useCallback(\r\n        debounce(() => {\r\n            resetTextField();\r\n            setFilterId(undefined);\r\n        }, DEBOUNCE_TIME_MS),\r\n        [value]\r\n    );\r\n\r\n    const handleChange = useCallback(\r\n        (ev: ChangeEvent<HTMLInputElement>) => {\r\n            if (!isNaN(ev.target.value as unknown as number)) {\r\n                setTextField(ev.target.value as string);\r\n            }\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [value]\r\n    );\r\n\r\n    // const act = (ev: ChangeEvent<HTMLInputElement>) => {\r\n    //     if (!isNaN(ev.target.value as unknown as number)) {\r\n    //         setTextField(ev.target.value as string);\r\n    //     }\r\n    // };\r\n\r\n    // const debouncedChangeHandler = useMemo(() => {\r\n    //     const changeHandler = (event: any) => {\r\n    //         act(event);\r\n    //     };\r\n\r\n    //     return debounce(changeHandler, 300);\r\n    // }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    useEffect(() => {\r\n        const valueAsNumber = +value;\r\n        if (productsIDs.includes(valueAsNumber)) {\r\n            setFilterId(valueAsNumber);\r\n            // const newPathname = `${PAGE_PREFIX}${currentDataPageNumber.toString()}${PRODUCT_PREFIX}${value}`;\r\n            // console.log(newPathname);\r\n            // navigate(newPathname);\r\n        } else {\r\n            valueAsNumber &&\r\n                showMessage.warning(\r\n                    `Requested Id ${valueAsNumber} is out of scope  ${productsIDs[0]} -  ${productsIDs.at(\r\n                        -1\r\n                    )}  . Try with another Id`\r\n                );\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [value]);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            handleReset.cancel();\r\n        };\r\n    }, [handleReset]);\r\n\r\n    if (!areProductsLoaded) return null;\r\n\r\n    return (\r\n        <Stack direction=\"row\" spacing={2} justifyContent=\"flex-start\" alignItems=\"center\">\r\n            <TextField\r\n                id=\"standard-basic\"\r\n                disabled={!areProductsLoaded}\r\n                value={value}\r\n                onChange={handleChange}\r\n                // onChange={debouncedChangeHandler}\r\n                label=\"Enter product id\"\r\n                variant=\"standard\"\r\n            />\r\n            <Button disabled={!value} onClick={handleReset}>\r\n                <ClearIcon />\r\n            </Button>\r\n        </Stack>\r\n    );\r\n};\r\nexport default React.memo(Filter);\r\n","import Stack from \"@mui/material/Stack\";\r\nimport Button from \"@mui/material/Button\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\r\n\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { shallowEqual, useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport useDispatchAction from \"hooks/useDispatchAction\";\r\n\r\nimport { getIsPreviousButtonVisible, getIsNextButtonVisible, getCurrentPageNumber } from \"reduxware/selectors\";\r\nimport { PAGE_PREFIX } from \"config\";\r\nimport debounce from \"lodash/debounce\";\r\n\r\nconst buttonStyle = {\r\n    width: \"150px\",\r\n};\r\nconst DEBOUNCE_TIME_MS = 400;\r\ninterface Props {\r\n    resetTextField: () => void;\r\n}\r\n\r\nconst Navigation = (props: Props) => {\r\n    const { resetTextField } = props;\r\n    const { showNextPage, showPreviousPage } = useDispatchAction();\r\n    const isPreviousButtonVisible = useSelector(getIsPreviousButtonVisible);\r\n    const isNextButtonVisible = useSelector(getIsNextButtonVisible);\r\n    const currentDataPageNumber = useSelector(getCurrentPageNumber, shallowEqual);\r\n    const { setFilterId } = useDispatchAction();\r\n    const navigate = useNavigate();\r\n\r\n    const handleClickNext = useCallback(\r\n        debounce(() => {\r\n            setFilterId(undefined);\r\n            showNextPage();\r\n            const newPathname = `${PAGE_PREFIX}${(currentDataPageNumber + 1).toString()}`;\r\n            newPathname && navigate(newPathname);\r\n            resetTextField();\r\n        }, DEBOUNCE_TIME_MS),\r\n        [currentDataPageNumber]\r\n    );\r\n\r\n    const handleClickPrevious = useCallback(\r\n        debounce(() => {\r\n            setFilterId(undefined);\r\n            showPreviousPage();\r\n            const newPathname = `${PAGE_PREFIX}${(currentDataPageNumber - 1).toString()}`;\r\n            newPathname && navigate(newPathname);\r\n            resetTextField();\r\n        }, DEBOUNCE_TIME_MS),\r\n        [currentDataPageNumber]\r\n    );\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            handleClickPrevious.cancel();\r\n        };\r\n    }, [handleClickPrevious]);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            handleClickNext.cancel();\r\n        };\r\n    }, [handleClickNext]);\r\n\r\n    return (\r\n        <Stack direction=\"row\" spacing={2} justifyContent=\"center\" alignItems=\"center\">\r\n            <Button\r\n                variant=\"contained\"\r\n                disabled={!isPreviousButtonVisible}\r\n                sx={buttonStyle}\r\n                onClick={handleClickPrevious}\r\n            >\r\n                <ArrowBackIcon />\r\n            </Button>\r\n            <Button variant=\"contained\" disabled={!isNextButtonVisible} sx={buttonStyle} onClick={handleClickNext}>\r\n                <ArrowForwardIcon />\r\n            </Button>\r\n        </Stack>\r\n    );\r\n};\r\n\r\nexport default Navigation;\r\n","import React, { useCallback, useState } from \"react\";\r\nimport { Outlet } from \"react-router-dom\";\r\n\r\nimport Filter from \"./Filter\";\r\nimport Navigation from \"./Navigation\";\r\nimport useManageTextField from \"hooks/useManageTextField\";\r\n\r\nconst INITIAL_TEXTFIELD_VALUE = \"\";\r\n\r\nconst ColorsLayout = () => {\r\n    const { value, setTextFieldValue, resetTextFieldValue } = useManageTextField();\r\n\r\n    return (\r\n        <>\r\n            <Filter resetTextField={resetTextFieldValue} setTextField={setTextFieldValue} value={value} />\r\n            <Outlet />\r\n            <Navigation resetTextField={resetTextFieldValue} />\r\n        </>\r\n    );\r\n};\r\nexport default React.memo(ColorsLayout);\r\n"],"names":["Filter","props","resetTextField","setTextField","value","setFilterId","useDispatchAction","areProductsLoaded","useSelector","areProductsNotEmpty","productsIDs","getCurrentPageNumber","shallowEqual","getProductsIDs","showMessage","useMessage","handleReset","useNavigate","useCallback","debounce","undefined","handleChange","ev","isNaN","target","useEffect","valueAsNumber","includes","warning","concat","at","cancel","_jsxs","Stack","direction","spacing","justifyContent","alignItems","children","_jsx","TextField","id","disabled","onChange","label","variant","Button","onClick","ClearIcon","React","buttonStyle","width","showNextPage","showPreviousPage","isPreviousButtonVisible","getIsPreviousButtonVisible","isNextButtonVisible","getIsNextButtonVisible","currentDataPageNumber","navigate","handleClickNext","newPathname","PAGE_PREFIX","toString","handleClickPrevious","sx","ArrowBackIcon","ArrowForwardIcon","ColorsLayout","setTextFieldValue","resetTextFieldValue","useManageTextField","_Fragment","Outlet","Navigation"],"sourceRoot":""}